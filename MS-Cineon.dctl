// Copyright 2024-present Contributors to the colorpicker project.
// SPDX-License-Identifier: BSD-3-Clause
// https://github.com/mikaelsundell/davinci

// clang-format off
DEFINE_UI_PARAMS(exposure, Exposure, DCTLUI_SLIDER_FLOAT, 0.0, -8.0, 8.0, 0.1)
DEFINE_UI_PARAMS(dminx, Dmin R, DCTLUI_SLIDER_FLOAT, 200, 0, 1023, 0.05);
DEFINE_UI_PARAMS(dminy, Dmin G, DCTLUI_SLIDER_FLOAT, 100, 0, 1023, 0.05);
DEFINE_UI_PARAMS(dminz, Dmin B, DCTLUI_SLIDER_FLOAT, 50, 0, 1023, 0.05);
DEFINE_UI_PARAMS(scalex, Scale R, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.05);
DEFINE_UI_PARAMS(scaley, Scale G, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.05);
DEFINE_UI_PARAMS(scalez, Scale B, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.05);
DEFINE_UI_PARAMS(gamma, Gamma, DCTLUI_SLIDER_FLOAT, 0.6, 0, 2, 0.05);

// headers
#include "MS-Utils.h"

struct Density
{
    float offset[3] = {25.0, 25.0, 25.0};
    float step[3] = {0.0025, 0.0025, 0.0025};
    float scale[3] = {1.0, 1.0, 1.0};
    float dmin[3] = {0.0, 0.0, 0.0};
    struct ROI
    {
        int x1, x2, y1, y2;
    };
    struct Cineon
    {
        float density = 2.046;
        float steps = 0.002;
        float codevalue = 500.0;
        float offset = 95.0;
        float lin = 0.18;
        float log = 470.0;
        float gamma = 0.6;
        Cineon()
        {
            steps = density / (1023.0);
            codevalue = 1.0 / steps;
        }
    } cineon;
    Density()
    {
        cineon = Cineon();
    }
};

// transform
__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float3 rgb = make_float3(p_R, p_G, p_B);
    rgb *= pow(2.0, -exposure);
    Density density = Density();
    // dmin
    density.dmin[0] = dminx / 1023.0f;
    density.dmin[1] = dminy / 1023.0f;
    density.dmin[2] = dminz / 1023.0f;
    // scale
    density.scale[0] = scalex;
    density.scale[1] = scaley;
    density.scale[2] = scalez;
    // gamma
    density.cineon.gamma = gamma;
    // transform
    for (int i = 0; i < 3; i++) {
        rgb[i] = density.scale[i] * log10(density.dmin[i] / rgb[i]);
        rgb[i] += (density.offset[i] - 25.0) * density.step[i];
        rgb[i] *= density.cineon.codevalue;
        rgb[i] += density.cineon.offset;
        rgb[i] = pow(10.0, (rgb[i] - density.cineon.log) * density.cineon.steps / density.cineon.gamma);
        rgb[i] *= density.cineon.lin;
    }
    return rgb;
}