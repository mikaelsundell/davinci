// Copyright 2022-present Contributors to the dctl project.
// SPDX-License-Identifier: BSD-3-Clause
// https://github.com/mikaelsundell/dctl

// clang-format on
DEFINE_UI_PARAMS(inputtransform, Input transform, DCTLUI_COMBO_BOX, 1, {INXYZ, INLOGC3, INREC709, INDCIP3, INGEN5}, {CIE XYZ/Lin, AWG/LogC3 , Rec709/Gamma2.2, DCI-P3/Gamma2.6, Blackmagic Gen5/Film})
DEFINE_UI_PARAMS(outputtransform, Output transform, DCTLUI_COMBO_BOX, 1,{OUTXYZ, OUTLOGC3, OUTREC709, OUTDCIP3, OUTGEN5}, {CIE XYZ/Lin, AWG/LogC3 , Rec709/Gamma2.2, DCI-P3/Gamma2.6, Blackmagic Gen5/Film})
DEFINE_UI_PARAMS(ei, LogC3 EI, DCTLUI_COMBO_BOX, 7, {EI160, EI200, EI250, EI320, EI400, EI500, EI640, EI800, EI1000, EI1280, EI1600}, {EI 160, EI 200, EI 250, EI 320, EI 400, EI 500, EI 640, EI 800, EI 1000, EI 1280, EI 1600})
DEFINE_UI_PARAMS(mapcolorspace, Map colorspace, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(mapgamma, Map gamma, DCTLUI_CHECK_BOX, 1)

// headers
#include "PD-Common.h"
#include "PD-LogC3.h"
#include "PD-Rec709.h"
#include "PD-DCIP3.h"
#include "PD-Gen5.h"

// transform
__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float3 rgb = make_float3(p_R, p_G, p_B);
    // input transform
    if (mapgamma) {
        if (inputtransform == INLOGC3) {
            rgb = logC3_lin(rgb, ei);
        }
        else if (inputtransform == INREC709) {
            rgb = rec709_lin(rgb);
        }
        else if (inputtransform == INDCIP3) {
            rgb = dcip3_lin(rgb);
        }
        else if (inputtransform == INGEN5) {
            rgb = gen5_lin(rgb);
        }
    }
    if (mapcolorspace) {
        if (inputtransform == INLOGC3) {
            rgb = logC3_xyz(rgb);
        }
        else if (inputtransform == INREC709) {
            rgb = rec709_xyz(rgb);
        }
        else if (inputtransform == INDCIP3) {
            rgb = dcip3_xyz(rgb);
        }
        else if (inputtransform == INGEN5) {
            rgb = gen5_xyz(rgb);
        }
    }
    // output transform
    if (mapcolorspace) {
        if (outputtransform == OUTLOGC3) {
            rgb = xyz_logC3(rgb);
        }
        else if (outputtransform == OUTREC709) {
            rgb = xyz_rec709(rgb);
        }
        else if (outputtransform == OUTDCIP3) {
            rgb = xyz_dcip3(rgb);
        }
        else if (outputtransform == OUTGEN5) {
            rgb = xyz_gen5(rgb);
        }
    }
    if (mapgamma) {
        if (outputtransform == OUTLOGC3) {
            rgb = lin_logC3(rgb, ei);
        }
        else if (outputtransform == OUTREC709) {
            rgb = lin_rec709(rgb);
        }
        else if (outputtransform == OUTDCIP3) {
            rgb = lin_dcip3(rgb);
        }
        else if (outputtransform == OUTGEN5) {
            rgb = lin_gen5(rgb);
        }
    }
    return rgb;
}
