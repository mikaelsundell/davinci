// Copyright 2022-present Contributors to the dctl project.
// SPDX-License-Identifier: BSD-3-Clause
// https://github.com/mikaelsundell/dctl

// clang-format off
DEFINE_UI_PARAMS(ei, LogC3 EI, DCTLUI_COMBO_BOX, 7, {EI160, EI200, EI250, EI320, EI400, EI500, EI640, EI800, EI1000, EI1280, EI1600}, {EI 160, EI 200, EI 250, EI 320, EI 400, EI 500, EI 640, EI 800, EI 1000, EI 1280, EI 1600});
DEFINE_UI_PARAMS(contrastlut, Film contrast, DCTLUI_COMBO_BOX, 0, {CONTRASTLUT0, CONTRASTLUT1, CONTRASTLUT2, CONTRASTLUT3, CONTRASTLUT4, CONTRASTLUT5}, {Rec709 Fujifilm 3513DI D55, Rec709 Fujifilm 3513DI D60, Rec709 Fujifilm 3513DI D65, Rec709 Kodak 2383 D55, Rec709 Kodak 2383 D60, Rec709 Kodak 2383 D65});
DEFINE_UI_PARAMS(cubelut, Film cube, DCTLUI_COMBO_BOX, 0, {CUBELUT0, CUBELUT1, CUBELUT2, CUBELUT3, CUBELUT4, CUBELUT5}, {Rec709 Fujifilm 3513DI D55, Rec709 Fujifilm 3513DI D60, Rec709 Fujifilm 3513DI D65, Rec709 Kodak 2383 D55, Rec709 Kodak 2383 D60, Rec709 Kodak 2383 D65});
DEFINE_UI_PARAMS(contrastblend, Contrast blend, DCTLUI_SLIDER_FLOAT, 0, 0, 100, 1);
DEFINE_UI_PARAMS(cubeblend, Colors blend, DCTLUI_SLIDER_FLOAT, 0, 0, 100, 1);
DEFINE_UI_PARAMS(convertcineon, Convert to cineon, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(adjustdisplay, Adjust for display, DCTLUI_CHECK_BOX, 0)

// luts
#ifdef DEVICE_IS_METAL
DEFINE_LUT(LUTMETAL0, ../Film Looks/Rec709 Fujifilm 3513DI D55.cube)
DEFINE_LUT(LUTMETAL1, ../Film Looks/Rec709 Fujifilm 3513DI D60.cube)
DEFINE_LUT(LUTMETAL2, ../Film Looks/Rec709 Fujifilm 3513DI D65.cube)
DEFINE_LUT(LUTMETAL3, ../Film Looks/Rec709 Kodak 2383 D55.cube)
DEFINE_LUT(LUTMETAL4, ../Film Looks/Rec709 Kodak 2383 D60.cube)
DEFINE_LUT(LUTMETAL5, ../Film Looks/Rec709 Kodak 2383 D65.cube)
#else
DEFINE_LUT(LUTCUDA0, ..\Film Looks\Rec709 Fujifilm 3513DI D55.cube)
DEFINE_LUT(LUTCUDA1, ..\Film Looks\Rec709 Fujifilm 3513DI D60.cube)
DEFINE_LUT(LUTCUDA2, ..\Film Looks\Rec709 Fujifilm 3513DI D65.cube)
DEFINE_LUT(LUTCUDA3, ..\Film Looks\Rec709 Kodak 2383 D55.cube)
DEFINE_LUT(LUTCUDA4, ..\Film Looks\Rec709 Kodak 2383 D60.cube)
DEFINE_LUT(LUTCUDA5, ..\Film Looks\Rec709 Kodak 2383 D65.cube)
#endif

// headers
#include "MS-Utils.h"
#include "MS-LogC3.h"
#include "MS-Cineon.h"

// transform
__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float3 rgb = make_float3(p_R, p_G, p_B);
    if (convertcineon) {
        rgb = lin_cineon(logC3_lin(rgb, ei));
    }

    float3 color;
    #ifdef DEVICE_IS_METAL
    if (cubelut == CUBELUT0) {    
        color = APPLY_LUT(rgb.x, rgb.y, rgb.z, LUTMETAL0);
    } else if (cubelut == CUBELUT1) {
        color = APPLY_LUT(rgb.x, rgb.y, rgb.z, LUTMETAL1);
    } else if (cubelut == CUBELUT2) {
        color = APPLY_LUT(rgb.x, rgb.y, rgb.z, LUTMETAL2);
    } else if (cubelut == CUBELUT3) {
        color = APPLY_LUT(rgb.x, rgb.y, rgb.z, LUTMETAL3);
    } else if (cubelut == CUBELUT4) {
        color = APPLY_LUT(rgb.x, rgb.y, rgb.z, LUTMETAL4);
    } else if (cubelut == CUBELUT5) {
        color = APPLY_LUT(rgb.x, rgb.y, rgb.z, LUTMETAL5);
    }
    #else
    if (cubelut == CUBELUT0) {    
        color = APPLY_LUT(rgb.x, rgb.y, rgb.z, LUTCUDA0);
    } else if (cubelut == CUBELUT1) {
        color = APPLY_LUT(rgb.x, rgb.y, rgb.z, LUTCUDA1);
    } else if (cubelut == CUBELUT2) {
        color = APPLY_LUT(rgb.x, rgb.y, rgb.z, LUTCUDA2);
    } else if (cubelut == CUBELUT3) {
        color = APPLY_LUT(rgb.x, rgb.y, rgb.z, LUTCUDA3);
    } else if (cubelut == CUBELUT4) {
        color = APPLY_LUT(rgb.x, rgb.y, rgb.z, LUTCUDA4);
    } else if (cubelut == CUBELUT5) {
        color = APPLY_LUT(rgb.x, rgb.y, rgb.z, LUTCUDA5);
    }
    #endif

    float3 result = adjust_luma_rec601(color, luma_rec601(rgb));
    rgb = mix3f(rgb, result, cubeblend / 100.0);

    float3 contrast;
    float ctgs = luma_rec601(rgb);
    #ifdef DEVICE_IS_METAL
    if (contrastlut == CONTRASTLUT0) {    
        contrast = APPLY_LUT(ctgs, ctgs, ctgs, LUTMETAL0);
    } else if (contrastlut == CONTRASTLUT1) {
        contrast = APPLY_LUT(ctgs, ctgs, ctgs, LUTMETAL1);
    } else if (contrastlut == CONTRASTLUT2) {
        contrast = APPLY_LUT(ctgs, ctgs, ctgs, LUTMETAL2);
    } else if (contrastlut == CONTRASTLUT3) {
        contrast = APPLY_LUT(ctgs, ctgs, ctgs, LUTMETAL3);
    } else if (contrastlut == CONTRASTLUT4) {
        contrast = APPLY_LUT(ctgs, ctgs, ctgs, LUTMETAL4);
    } else if (contrastlut == CONTRASTLUT5) {
        contrast = APPLY_LUT(ctgs, ctgs, ctgs, LUTMETAL5);
    }
    #else
    if (contrastlut == CONTRASTLUT0) {    
        contrast = APPLY_LUT(ctgs, ctgs, ctgs, LUTCUDA0);
    } else if (contrastlut == CONTRASTLUT1) {
        contrast = APPLY_LUT(ctgs, ctgs, ctgs, LUTCUDA1);
    } else if (contrastlut == CONTRASTLUT2) {
        contrast = APPLY_LUT(ctgs, ctgs, ctgs, LUTCUDA2);
    } else if (contrastlut == CONTRASTLUT3) {
        contrast = APPLY_LUT(ctgs, ctgs, ctgs, LUTCUDA3);
    } else if (contrastlut == CONTRASTLUT4) {
        contrast = APPLY_LUT(ctgs, ctgs, ctgs, LUTCUDA4);
    } else if (contrastlut == CONTRASTLUT5) {
        contrast = APPLY_LUT(ctgs, ctgs, ctgs, LUTCUDA5);
    }
    #endif

    float clgs = luma_rec601(contrast);
    float gs = mixf(ctgs, clgs, contrastblend / 100.0);    
    rgb = maxf3(adjust_luma_rec601(rgb, gs), 0.0);

    if (adjustdisplay) {
        rgb = adjust_display(rgb);
    }
    return rgb;
}
