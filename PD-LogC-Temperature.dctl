// Copyright 2022-present Contributors to the photographic-dctl project.
// SPDX-License-Identifier: BSD-3-Clause
// https://github.com/mikaelsundell/photographic-dctls

// clang-format on
DEFINE_UI_PARAMS(logc, LogC, DCTLUI_COMBO_BOX, 0, {LOGC3, LOGC4}, {LogC3, LogC4})
DEFINE_UI_PARAMS(ei, LogC3 EI, DCTLUI_COMBO_BOX, 7, {EI160, EI200, EI250, EI320, EI400, EI500, EI640, EI800, EI1000, EI1280, EI1600}, {EI 160, EI 200, EI 250, EI 320, EI 400, EI 500, EI 640, EI 800, EI 1000, EI 1280, EI 1600});
DEFINE_UI_PARAMS(kelvin, Kelvin, DCTLUI_SLIDER_FLOAT, 0, -4000, 4000, 1);

// headers
#include "PD-Common.h"
#include "PD-LogC.h"
#include "PD-CAT02.h"

// transform
__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float3 rgb = make_float3(p_R, p_G, p_B);
    if (logc == LOGC3) {
        rgb = logC3_xyz(logC3_lin(rgb, ei));
        rgb = cat02_adaptation(rgb, kelvin);
        rgb = lin_logC3(xyz_logC3(rgb), ei);
    }
    else {
        rgb = logC4_xyz(logC4_lin(rgb));
        rgb = cat02_adaptation(rgb, kelvin);
        rgb = lin_logC4(xyz_logC4(rgb));
    }
    return rgb;
}
