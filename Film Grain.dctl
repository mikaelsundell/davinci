DEFINE_UI_PARAMS(dmax, D Max, DCTLUI_VALUE_BOX, 4.0)
DEFINE_UI_PARAMS(dmin, D Min, DCTLUI_VALUE_BOX, 0.01)
DEFINE_UI_PARAMS(num_grains_per_pixel, Grains Per Pixel, DCTLUI_VALUE_BOX, 100)
DEFINE_UI_PARAMS(num_layers, Num Layers of Grains, DCTLUI_VALUE_BOX, 5)
DEFINE_UI_PARAMS(activation_threshold, Activation Threshold, DCTLUI_VALUE_BOX, 0.18)
DEFINE_UI_PARAMS(photon_gain, Photon Gain, DCTLUI_VALUE_BOX, 0.5)
DEFINE_UI_PARAMS(noise_mode, Noise Mode, DCTLUI_COMBO_BOX, 1, {RGB, MONO}, {RGB Noise, Monochrome Noise})
DEFINE_UI_PARAMS(seed_position_x, Seed Position X, DCTLUI_SLIDER_FLOAT, 0.4, 0.0, 1.0, 0.01)
DEFINE_UI_PARAMS(seed_position_y, Seed Position Y, DCTLUI_SLIDER_FLOAT, 0.4, 0.0, 1.0, 0.01)

/////////////////////////////////////////////
// PDFs and CDFs
/////////////////////////////////////////////

__DEVICE__ float standard_norm_cdf(float z) {
    // Approximation of Normal CDF function with mean 0 and var 1.
    const float k = _sqrtf(2.0 / 3.1415926535);
    float output = 1.0 / (1.0 + _expf(-2.0 * k * z));
    return output;
}

__DEVICE__ float norm_cdf(float z, float mean, float var) {
    float output = standard_norm_cdf((z - mean) / _sqrtf(var));
    return output;
}

__DEVICE__ float standard_norm_inv_cdf(float z) {
    // Approximation from "Very Simply Explicitly Invertible Approximations of
    // Normal Cumulative and Normal Quantile Function" by Alessandro Soranzo

    // CDF
    // float out = _powf(2.0, -1.0 * _powf(22, 1 - _powf(41, z / 10.0)));
    float abs_z = _fabs(z - 0.5) + 0.5;
    float out = 10.0 / _logf(41.0) * _logf(1.0 - (_logf((-1.0 * _logf(abs_z)) / _logf(2.0))) / _logf(22.0));
    if (abs_z >= 0.995) {
        out = 2.5758;
    }

    if (z <= 0.5) {
        out *= -1.0;
    }
    return out;
}

__DEVICE__ float norm_inv_cdf(float z, float mean, float var) {
    float out = standard_norm_inv_cdf(z) * _sqrtf(var) + mean;
    return out;
}

__DEVICE__ float norm_pdf(float z, float mean, float var) {
    float out = _expf(-0.5 * _exp2f((z - mean)) / var);
    out *= 1.0 / (_sqrtf(2.0 * 3.1415926535 * var));
    return out;
}

__DEVICE__ float poisson_cdf(float z, float lambda) {
    // Approximate poisson distribution with normal distribution
    float output = norm_cdf(z, lambda, lambda);
    return output;
}

__DEVICE__ float binomial_cdf(float z, float n, float p) {
    float out = norm_cdf(z, n * p, n * p * (1.0 - p));
    return out;
}

/////////////////////////////////////////////
// Random Number Generator
/////////////////////////////////////////////

typedef ulong rand_state;

__DEVICE__ float _randu_lcg(__PRIVATE__ rand_state* seed) {
    // Returns random number in interval [0, 1)
    rand_state old_seed = *seed;
    const rand_state m = (~((rand_state)0));
    const rand_state a = 48271;
    rand_state new_seed = (a * old_seed) % m;
    *seed = new_seed;
    return (((float)new_seed) / (float)m);
}

__DEVICE__ float _randu_xorshift(__PRIVATE__ rand_state* seed) {
    rand_state x = *seed;
    x ^= (x << 13 | x >> 19);
    x ^= (x >> 7 | x << 25);
    x ^= (x << 15 | x >> 15);
    *seed = x;
    return (((float)x) / (float)(~((rand_state)0)));
}

__DEVICE__ inline float randu(__PRIVATE__ rand_state* seed) {
    return _randu_xorshift(seed);
}

/////////////////////////////////////////////
// Distribution Sampling functions
/////////////////////////////////////////////

__DEVICE__ float sample_uniform(float a, float b, __PRIVATE__ rand_state* seed) {
    float range = b - a;
    float x = randu(seed);
    return a + range * x;
}

__DEVICE__ float sample_norm(float mean, float var, __PRIVATE__ rand_state* seed) {
    float u_sample = randu(seed);
    float out = norm_inv_cdf(u_sample, mean, var);
    return out;
}

__DEVICE__ float sample_poisson(float lambda, __PRIVATE__ rand_state* seed) {
    // approximate just using normal distribution.
    float sample = sample_norm(lambda, lambda, seed);
    return _fmaxf(0.001, sample);
}

__DEVICE__ float sample_bernoulli(float p, __PRIVATE__ rand_state* seed) {
    float sample = randu(seed);
    float out = 0.0;
    if (sample <= p) {
        out = 1.0;
    }
    return out;
}

__DEVICE__ float sample_binomial_continuous(float n, float p, __PRIVATE__ rand_state* seed) {
    float cont_sample = sample_norm(n * p, n * p * (1.0 - p), seed);
    return cont_sample;
}

__DEVICE__ float sample_binomial(float n, float p, __PRIVATE__ rand_state* seed) {
    // Approximation of binomial distribution using a normal distribution
    // requires that n * p  and n * (1 - p) is bigger than like 5.
    float cont_sample = sample_binomial_continuous(n, p, seed);
    float out = _round(cont_sample);
    return out;
}

/////////////////////////////////////////////
// Utilities for float3
/////////////////////////////////////////////

__DEVICE__ inline float3 _powf3(float3 base, float gamma) {
    float3 output = make_float3(_powf(base.x, gamma), _powf(base.y, gamma), _powf(base.z, gamma));
    return output;
}

__DEVICE__ inline float3 _threshold3(float3 input, float threshold) {
    float3 output = make_float3(0.0, 0.0, 0.0);
    output.x = 1.0 * (input.x >= threshold);
    output.y = 1.0 * (input.y >= threshold);
    output.z = 1.0 * (input.z >= threshold);
    return output;
}

/////////////////////////////////////////////
// Density Calculation
/////////////////////////////////////////////

__DEVICE__ float convert_photons_to_transmittance(
    float pixel_photons, float threshold, float num_grains, float num_layers, float dmax, float dmin, __PRIVATE__ rand_state* seed) {

    // Probability of a grain being activated, given its threshold
    // P(activated) = P(x >= threshold) = 1 - P(x <= threshold)
    float p = 1.0 - poisson_cdf(threshold, pixel_photons);

    float T = 1.0;

    float layer_transmittance = _powf(_powf(10.0, -1.0 * dmin), 1.0 / num_layers);
    float grain_absorption = 1 - _powf(_powf(10.0, -1.0 * dmax), 1.0 / num_layers);

    for (int i = 0; i < num_layers; ++i) {
        float N = sample_binomial_continuous(num_grains, p, seed);
        float T_i = layer_transmittance - (grain_absorption * (N / num_grains));
        T *= T_i;
    }
    T = _clampf(T, 0.0, 1.0);
    return T;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB) {

    float seed = _tex2D(p_TexR, (int)(seed_position_x * p_Width), (int)(seed_position_y * p_Height));
    seed += _tex2D(p_TexG, (int)(seed_position_x * p_Width), (int)(seed_position_y * p_Height)) * 20.0;
    seed += _tex2D(p_TexB, (int)(seed_position_x * p_Width), (int)(seed_position_y * p_Height)) * 400.0;

    // Output transmitted light, assume a single grain size.
    rand_state state_value = *((__PRIVATE__ rand_state*)&seed);
    __PRIVATE__ rand_state* state = &state_value;

    float val;
    *state ^= p_Width * p_Height;
    *state ^= (p_Width * p_Y + p_X) << 5;
    val = randu(state);
    val = randu(state);
    val = randu(state);
    val = randu(state);
    *state = *((__PRIVATE__ rand_state*)&val);

    float3 output_color = make_float3(0.0, 0.0, 0.0);
    float3 curr_color = make_float3(_tex2D(p_TexR, p_X, p_Y), _tex2D(p_TexG, p_X, p_Y), _tex2D(p_TexB, p_X, p_Y)) * photon_gain;

    if (noise_mode == MONO) {
        // As the seed of the random number generators is only dependent
        // on the position of the current pixel (and the value of some arbitrary
        // pixel in the middle of the frame), we can simply share the same seed
        // between all three channels to generate monochrome noise. IE the same
        // exposure adjustment will be applied to all three channels, resulting in
        // a neutral look.
        rand_state initial_state_value_red = *state;
        rand_state initial_state_value_green = *state;
        rand_state initial_state_value_blue = *state;

        output_color.x = convert_photons_to_transmittance(
            curr_color.x, activation_threshold, num_grains_per_pixel, num_layers, dmax, dmin, &initial_state_value_red);
        output_color.y = convert_photons_to_transmittance(
            curr_color.y, activation_threshold, num_grains_per_pixel, num_layers, dmax, dmin, &initial_state_value_green);
        output_color.z = convert_photons_to_transmittance(
            curr_color.z, activation_threshold, num_grains_per_pixel, num_layers, dmax, dmin, &initial_state_value_blue);
    } else {
        output_color.x =
            convert_photons_to_transmittance(curr_color.x, activation_threshold, num_grains_per_pixel, num_layers, dmax, dmin, state);
        output_color.y =
            convert_photons_to_transmittance(curr_color.y, activation_threshold, num_grains_per_pixel, num_layers, dmax, dmin, state);
        output_color.z =
            convert_photons_to_transmittance(curr_color.z, activation_threshold, num_grains_per_pixel, num_layers, dmax, dmin, state);
    }
    return output_color;
}
